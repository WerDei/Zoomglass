import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.8.7"
    id "net.darkhax.curseforgegradle" version "1.1.25"
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content { includeGroup "maven.modrinth" }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "maven.modrinth:modmenu:12.0.0-beta.1"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "supported_version_range": project.supported_version_range,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}


// Mod publishing

def versionDisplayName = project.mod_name + ' - ' + project.version
def supportedMinecraftVersions = project.mod_supported_minecraft_versions.split(',').toList()
def changelogText = new File('./CHANGELOG.md').text


modrinth
{
    token = project.hasProperty("modrinth_token") ? project.modrinth_token : ''
    projectId = project.modrinth_mod_id
    versionName = versionDisplayName
    versionNumber = project.version
    versionType = project.mod_version_type

    gameVersions = supportedMinecraftVersions
    loaders = ["fabric", "quilt"]
    changelog = changelogText

    uploadFile = remapJar
}

tasks.register('curseforge', TaskPublishCurseForge)
{
    group 'publishing'
    apiToken = project.curseforge_token

    disableVersionDetection()
    def mainFile = upload(curseforge_mod_id, remapJar)
    mainFile.changelog = changelogText
    mainFile.changelogType = 'markdown'
    mainFile.releaseType = project.mod_version_type
    mainFile.displayName = versionDisplayName
    mainFile.addModLoader('Fabric')
    mainFile.addModLoader('Quilt')
    for (ver in supportedMinecraftVersions)
    {
        mainFile.addGameVersion(ver)
    }
}
